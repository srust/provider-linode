/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv6rangeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether this IPv6 range is shared.
	// Whether this IPv6 range is shared.
	IsBGP *bool `json:"isBgp,omitempty" tf:"is_bgp,omitempty"`

	// A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
	// A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
	Linodes []*float64 `json:"linodes,omitempty" tf:"linodes,omitempty"`

	// The IPv6 range of addresses in this pool.
	// The IPv6 range of addresses in this pool.
	Range *string `json:"range,omitempty" tf:"range,omitempty"`

	// The region for this range of IPv6 addresses.
	// The region for this range of IPv6 addresses.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type IPv6rangeParameters struct {

	// The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.
	// The ID of the Linode to assign this range to.
	// +kubebuilder:validation:Optional
	LinodeID *float64 `json:"linodeId,omitempty" tf:"linode_id,omitempty"`

	// The prefix length of the IPv6 range.
	// The prefix length of the IPv6 range.
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// The IPv6 SLAAC address to assign this range to.
	// The IPv6 SLAAC address to assign this range to.
	// +kubebuilder:validation:Optional
	RouteTarget *string `json:"routeTarget,omitempty" tf:"route_target,omitempty"`
}

// IPv6rangeSpec defines the desired state of IPv6range
type IPv6rangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv6rangeParameters `json:"forProvider"`
}

// IPv6rangeStatus defines the observed state of IPv6range.
type IPv6rangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv6rangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPv6range is the Schema for the IPv6ranges API. Manages a Linode IPv6 range.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type IPv6range struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPv6rangeSpec   `json:"spec"`
	Status            IPv6rangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv6rangeList contains a list of IPv6ranges
type IPv6rangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv6range `json:"items"`
}

// Repository type metadata.
var (
	IPv6range_Kind             = "IPv6range"
	IPv6range_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPv6range_Kind}.String()
	IPv6range_KindAPIVersion   = IPv6range_Kind + "." + CRDGroupVersion.String()
	IPv6range_GroupVersionKind = CRDGroupVersion.WithKind(IPv6range_Kind)
)

func init() {
	SchemeBuilder.Register(&IPv6range{}, &IPv6rangeList{})
}
